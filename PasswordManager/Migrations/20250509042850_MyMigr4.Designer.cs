// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PasswordManager.Contexts;

#nullable disable

namespace PasswordManager.Migrations
{
    [DbContext(typeof(ClientContext))]
    [Migration("20250509042850_MyMigr4")]
    partial class MyMigr4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PasswordManager.Models.ClientBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MasterPassword")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasDiscriminator<int>("ClientType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PasswordManager.Models.SecretBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecretQuality")
                        .HasColumnType("int");

                    b.Property<int>("SecretType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isNull")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Secrets");

                    b.HasDiscriminator<int>("SecretType").HasValue(0);

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PasswordManager.Models.Admin", b =>
                {
                    b.HasBaseType("PasswordManager.Models.ClientBase");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("PasswordManager.Models.User", b =>
                {
                    b.HasBaseType("PasswordManager.Models.ClientBase");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("PasswordManager.Models.Pincode", b =>
                {
                    b.HasBaseType("PasswordManager.Models.SecretBase");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("PasswordManager.Models.SitePassword", b =>
                {
                    b.HasBaseType("PasswordManager.Models.SecretBase");

                    b.Property<string>("SiteUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("PasswordManager.Models.SecretBase", b =>
                {
                    b.HasOne("PasswordManager.Models.ClientBase", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("PasswordManager.Models.User", null)
                        .WithMany("Secrets")
                        .HasForeignKey("UserId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PasswordManager.Models.User", b =>
                {
                    b.Navigation("Secrets");
                });
#pragma warning restore 612, 618
        }
    }
}
