// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PasswordManager.Contexts;

#nullable disable

namespace PasswordManager.Migrations
{
    [DbContext(typeof(ClientContext))]
    [Migration("20250513150303_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PasswordManager.Models.Classes.Clients.ClientBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MasterPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ClientBase", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("PasswordManager.Models.Classes.Secrets.SecretBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("LastUpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SecretType")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Secrets");

                    b.HasDiscriminator().HasValue("SecretBase");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PasswordManager.Models.Classes.Clients.Admin", b =>
                {
                    b.HasBaseType("PasswordManager.Models.Classes.Clients.ClientBase");

                    b.Property<int>("UsersCreated")
                        .HasColumnType("int");

                    b.Property<int>("UsersDeleted")
                        .HasColumnType("int");

                    b.Property<int>("UsersUpdated")
                        .HasColumnType("int");

                    b.ToTable("Admin", (string)null);
                });

            modelBuilder.Entity("PasswordManager.Models.Classes.Clients.User", b =>
                {
                    b.HasBaseType("PasswordManager.Models.Classes.Clients.ClientBase");

                    b.Property<int>("PasswordsCreated")
                        .HasColumnType("int");

                    b.Property<int>("PasswordsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("PasswordsUpdated")
                        .HasColumnType("int");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("PasswordManager.Models.Classes.Secrets.Pincode", b =>
                {
                    b.HasBaseType("PasswordManager.Models.Classes.Secrets.SecretBase");

                    b.HasDiscriminator().HasValue("Pincode");
                });

            modelBuilder.Entity("PasswordManager.Models.Classes.Secrets.SitePassword", b =>
                {
                    b.HasBaseType("PasswordManager.Models.Classes.Secrets.SecretBase");

                    b.Property<int>("SecretQuality")
                        .HasColumnType("int");

                    b.Property<string>("SiteURL")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("SitePassword");
                });

            modelBuilder.Entity("PasswordManager.Models.Classes.Secrets.SecretBase", b =>
                {
                    b.HasOne("PasswordManager.Models.Classes.Clients.ClientBase", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PasswordManager.Models.Classes.Clients.User", null)
                        .WithMany("Secrets")
                        .HasForeignKey("UserId");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PasswordManager.Models.Classes.Clients.Admin", b =>
                {
                    b.HasOne("PasswordManager.Models.Classes.Clients.ClientBase", null)
                        .WithOne()
                        .HasForeignKey("PasswordManager.Models.Classes.Clients.Admin", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PasswordManager.Models.Classes.Clients.User", b =>
                {
                    b.HasOne("PasswordManager.Models.Classes.Clients.ClientBase", null)
                        .WithOne()
                        .HasForeignKey("PasswordManager.Models.Classes.Clients.User", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PasswordManager.Models.Classes.Clients.User", b =>
                {
                    b.Navigation("Secrets");
                });
#pragma warning restore 612, 618
        }
    }
}
