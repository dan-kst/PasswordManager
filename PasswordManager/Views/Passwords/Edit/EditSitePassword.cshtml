@{
	@model SitePassword
	ViewData["Title"] = "Edit Password";
}

<h1>Edit</h1>
<div class="row">
    <div class="col-md-4">
        <form asp-action="EditSitePassword" method="post">
            <input type="text" asp-for="Id" class="form-control" hidden />
            <input type="text" asp-for="ClientId" class="form-control" hidden />

            <div class="form-group">
                <label class="control-label">@Html.DisplayNameFor(model => model.Name)</label>
                <input type="text" asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label class="control-label">@Html.DisplayNameFor(model => model.Value)</label>
                <input type="text" asp-for="Value" class="form-control" id="passwordValue"/>
                <span asp-validation-for="Value" class="text-danger"></span>
            </div>
            
            <div class="form-group">
                <label class="control-label">Type</label>
                <select asp-for="SecretQuality" class="form-control" id="secretQualitySelect" disabled>
                    <option value="@EnumSecretQuality.VeryWeak">@EnumSecretQuality.VeryWeak</option>
                    <option value="@EnumSecretQuality.Weak">@EnumSecretQuality.Weak</option>
                    <option value="@EnumSecretQuality.Fair">@EnumSecretQuality.Fair</option>
                    <option value="@EnumSecretQuality.Good">@EnumSecretQuality.Good</option>
                    <option value="@EnumSecretQuality.Strong">@EnumSecretQuality.Strong</option>
                    <option value="@EnumSecretQuality.VeryStrong">@EnumSecretQuality.VeryStrong</option>
                </select>
                <input type="hidden" name="SecretQuality" id="hiddenSecretQuality" value="@Model.SecretQuality" />
            </div>
            
            <div class="form-group">
                <label class="control-label">@Html.DisplayNameFor(model => model.SiteURL)</label>
                <input type="text" asp-for="SiteURL" class="form-control" />
                <span asp-validation-for="SiteURL" class="text-danger"></span>
            </div>

            <br />
            <button type="submit" class="btn btn-primary">Edit</button>
            <button asp-action="Index" class="btn btn-secondary">Back</button>

            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        </form>
    </div>
</div>

@section Scripts
{
    <script>
        const strengthLevels = [
            { value: 0, text: "VeryWeak", color: "#dc3545" },
            { value: 1, text: "Weak", color: "#dc3545" },
            { value: 2, text: "Fair", color: "#fd7e14" },
            { value: 3, text: "Good", color: "#ffc107" },
            { value: 4, text: "Strong", color: "#28a745" },
            { value: 5, text: "VeryStrong", color: "#007bff" }
        ];

        function getPasswordStrength(password) {
            let score = 0;
            let length_scaling = 3;

            if (password.length < 8)
                return 0;

            let has_digit = /[0-9]/i.test(password);      //містить цифру
            let has_letter = /[a-z]/i.test(password);      //містить літеру
            let has_symbol = /\W/i.test(password);         //містить символ
            let digits_repeats = /[0-9]{4,}/i.test(password);  //цифри не повторюються більше N разів
            let letters_repeats = /[a-z]{4,}/i.test(password);  //літери не повторюються більше N разів
            let symbols_repeats = /\W{4,}/i.test(password);     //символи не повторюються більше N разів
            let digit_repeat = /([0-9])\1+/i.test(password); //цифра не повторюється більше N разів
            let letter_repeat = /([a-z])\1+/i.test(password); //літера не повторюється більше N разів
            let symbol_repeat = /(\W)\1+/i.test(password);    //символ не повторюється більше N разів

            //оцінка збільшується пропорційно розміру
            score = (password.length >= 8) ? score + (password.length - (password.length % length_scaling)) / length_scaling : 0;

            score = (has_digit) ? score + 1 : score - 1;
            score = (has_letter) ? score + 1 : score - 1;
            score = (has_symbol) ? score + 1 : score - 3;
            score = (digits_repeats) ? score - 3 : score + 1;
            score = (letters_repeats) ? score - 3 : score + 1;
            score = (symbols_repeats) ? score - 2 : score + 1;
            score = (digit_repeat) ? score - 2 : score + 1;
            score = (letter_repeat) ? score - 2 : score + 1;
            score = (symbol_repeat) ? score - 2 : score + 3;

            score = (score < 0) ? 0 : (score > 5) ? 5 : score;

            return score;
        }

        function updateSecretQualitySelect(strength) {
            const select = document.getElementById("secretQualitySelect");
            const level = strengthLevels[strength];
            select.selectedIndex = strength;
            select.style.backgroundColor = level.color;

            document.getElementById("hiddenSecretQuality").value = select.options[select.selectedIndex].value;
        }

        document.getElementById("passwordValue").addEventListener("input", function () {
            const password = this.value;
            const strength = getPasswordStrength(password);
            updateSecretQualitySelect(strength);
            const test = document.getElementById("log");
            test.textContent = strength;
        });

        document.addEventListener("DOMContentLoaded", function () {
            // const password = document.getElementById("passwordValue").value;
            // const strength = getPasswordStrength(password);
            // updateSecretQualitySelect(strength);
            const select = document.getElementById("secretQualitySelect");
            select.pointer
            const level = strengthLevels[select.selectedIndex];
            select.style.backgroundColor = level.color;
        });
    </script>
}